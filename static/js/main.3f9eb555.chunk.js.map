{"version":3,"sources":["components/NavBar.js","components/dash/clusterSelection/InputUrl.js","components/dash/clusterSelection/SearchCluster.js","components/dash/clusterSelection/ClusterButton.js","components/dash/clusterSelection/ClusterList.js","components/dash/clusterSelection/sitestable/SiteRow.js","components/dash/clusterSelection/sitestable/SitesTable.js","components/websites/KeyWord.js","components/websites/KeyWordsCard.js","components/dash/clusterSelection/clusterinfo/index.js","components/dash/clusterSelection/ClusterSelection.js","components/dash/index.js","components/websites/InputUrl.js","components/websites/SimSitesCard.js","components/websites/index.js","App.js","serviceWorker.js","index.js"],"names":["style","width","className","src","alt","to","handleChange","handleClick","onChange","type","placeholder","aria-label","onClick","SearchCluster","selectedClassName","normalClassName","this","props","handleSubmit","handleSearchMode","searchMode","display","gridTemplateColumns","alignItems","justifyItems","marginBottom","class","InputUrl","React","Component","ClusterView","cluster_id","selectedClusterId","selectClusterId","cssClass","ClusterList","clusterIds","map","e","i","ClusterButton","key","siterow","site_obj","url","rank","SitesTable","fetchSites","mode","searchText","fetch","then","response","json","data","console","log","setState","sitesList","state","prevProps","obj","SiteRow","word","keywords","KeyWord","ClusterInfo","fetchInfo","clusterInfo","clusterData","currentCluster","clusterSizeChange","size","clusterRank","Math","round","clusterRankChange","id","KeyWordsCard","keyword","split","filter","trim","length","ClusterSelection","handleChangeInput","event","target","value","arr","push","Dash","websites","website","href","DisplayWebsiteInfo","prompt","App","fetchUrlDetails","searching","searched","SimSitesCard","NavBar","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3f9eb555.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nexport default function () {\n  return (\n    <div style={{ width: \"100vw\" }}>\n      <nav className=\"bg-gray-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <img\n                  className=\"h-8 w-8\"\n                  src=\"https://raw.githubusercontent.com/simple-icons/simple-icons/develop/icons/adobeillustrator.svg\"\n                  alt=\"Workflow logo\"\n                />\n              </div>\n              <div className=\"hidden md:block\">\n                <div className=\"ml-10 flex items-baseline\">\n                  <Link\n                    to=\"/dash\"\n                    className=\"px-3 py-2 rounded-md text-sm font-medium text-white bg-gray-900 focus:outline-none focus:text-white focus:bg-gray-700\"\n                  >\n                    Dashboard\n                  </Link>\n                  <Link\n                    to=\"/\"\n                    className=\"ml-4 px-3 py-2 rounded-md text-sm font-medium text-gray-300 hover:text-white hover:bg-gray-700 focus:outline-none focus:text-white focus:bg-gray-700\"\n                  >\n                    Home\n                  </Link>\n                  <Link\n                    to=\"/\"\n                    className=\"ml-4 px-3 py-2 rounded-md text-sm font-medium text-gray-300 hover:text-white hover:bg-gray-700 focus:outline-none focus:text-white focus:bg-gray-700\"\n                  >\n                    Overview\n                  </Link>\n                  <Link\n                    to=\"/websites\"\n                    className=\"ml-4 px-3 py-2 rounded-md text-sm font-medium text-gray-300 hover:text-white hover:bg-gray-700 focus:outline-none focus:text-white focus:bg-gray-700\"\n                  >\n                    websites\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function ({ handleChange, handleClick }) {\n  return (\n    <span className=\"flex w-full  items-center border-b border-b-2 border-gray-500 py-1 \">\n      <input\n        onChange={handleChange}\n        className=\"appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\"\n        type=\"text\"\n        placeholder=\"https://www.google.com/\"\n        aria-label=\"url\"\n      />\n      <button\n        onClick={handleClick}\n        className=\"flex-shrink-0 bg-gray-800 hover:bg-gray-900 border-gray-800 hover:border-gray-900 text-sm border-4 text-white py-1 px-2 rounded\"\n        type=\"button\"\n      >\n        Search\n      </button>\n    </span>\n  );\n}\n","import React from \"react\";\nimport InputUrl from \"./InputUrl\";\n\nclass SearchCluster extends React.Component {\n  render() {\n    let selectedClassName =\n      \"bg-gray-800 text-white hover:bg-gray-900 text-white font-bold py-2 px-4 rounded-l\";\n    let normalClassName =\n      \"bg-gray-200 text-white hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded-r\";\n    let {\n      handleChange,\n      handleSubmit,\n      handleSearchMode,\n      searchMode,\n    } = this.props;\n    return (\n      <div\n        style={{\n          display: \"grid\",\n          width: \"100vw\",\n          gridTemplateColumns: \"1fr 8fr 2fr\",\n          alignItems: \"center\",\n          justifyItems: \"center\",\n          marginBottom: \"5.3em\",\n        }}\n      >\n        <div class=\"flex justify-center px-2 w-auto hidden sm:block h-full \">\n          <button\n            type=\"button\"\n            class=\"inline-flex h-full items-center px-4 py-2 border border-gray-300 text-sm leading-5 font-medium rounded-md text-gray-700 bg-white hover:text-gray-500 focus:outline-none focus:shadow-outline-blue focus:border-blue-300 active:text-gray-800 active:bg-gray-50 transition duration-150 ease-in-out\"\n          >\n            Education\n          </button>\n        </div>\n        <InputUrl handleChange={handleChange} handleClick={handleSubmit} />\n        <span class=\"\">\n          <button\n            onClick={() => {\n              handleSearchMode(\"query\");\n            }}\n            className={\n              searchMode === \"query\" ? selectedClassName : normalClassName\n            }\n          >\n            Query\n          </button>\n          <button\n            onClick={() => {\n              handleSearchMode(\"domain\");\n            }}\n            className={\n              searchMode === \"domain\" ? selectedClassName : normalClassName\n            }\n          >\n            Org Name\n          </button>\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default SearchCluster;\n","import React from \"react\";\n\nconst ClusterView = ({ cluster_id, selectedClusterId, selectClusterId }) => {\n  let selectedClass =\n    \"inline-block bg-gray-800 rounded-full px-3 py-1 text-sm font-semibold text-white mr-2 mb-2 cursor-pointer\";\n  let normalClass =\n    \"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2 cursor-pointer\";\n  let cssClass = cluster_id === selectedClusterId ? selectedClass : normalClass;\n  return (\n    <span\n      className={cssClass}\n      onClick={() => {\n        selectClusterId(cluster_id);\n      }}\n    >\n      {cluster_id}\n    </span>\n  );\n};\n\nexport default ClusterView;\n","import React from \"react\";\nimport ClusterButton from \"./ClusterButton\";\n\nconst ClusterList = ({ clusterIds, selectedClusterId, selectClusterId }) => {\n  return (\n    <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8 my-8\">\n      <h2 className=\"text-3xl font-bold leading-tight text-gray-900\">\n        Categories\n      </h2>\n      <br />\n      {clusterIds.map((e, i) => (\n        <>\n          <ClusterButton\n            key={e}\n            cluster_id={e}\n            selectedClusterId={selectedClusterId}\n            selectClusterId={selectClusterId}\n          />\n        </>\n      ))}\n    </div>\n  );\n};\n\nexport default ClusterList;\n","import React from \"react\";\n\nconst siterow = ({ site_obj }) => {\n  return (\n    <tr>\n      <td className=\"px-6 py-4 whitespace-no-wrap border-b border-gray-200\">\n        <div className=\"flex items-center\">\n          <div className=\"flex-shrink-0 h-10 w-10\">\n            <img\n              className=\"h-10 w-10 rounded-full\"\n              src=\"https://raw.githubusercontent.com/simple-icons/simple-icons/develop/icons/airbnb.svg\"\n              alt=\"\"\n            />\n          </div>\n          <div className=\"ml-4\">\n            <div className=\"text-sm leading-5 font-medium text-gray-900\">\n              {site_obj.url}\n            </div>\n          </div>\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-no-wrap border-b border-gray-200\">\n        <h3>{site_obj.rank}</h3>\n      </td>\n      <td className=\"px-6 py-4 whitespace-no-wrap border-b border-gray-200\">\n        <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\n          +10\n        </span>\n      </td>\n      <td className=\"px-6 py-4 whitespace-no-wrap border-b border-gray-200 text-sm leading-5 text-gray-500\">\n        website key\n      </td>\n    </tr>\n  );\n};\n\nexport default siterow;\n","import React from \"react\";\nimport SiteRow from \"./SiteRow\";\n\nclass SitesTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sitesList: [],\n    };\n  }\n  fetchSites = () => {\n    let { selectedClusterId, mode, searchText } = this.props;\n    let url = \"\";\n    if (mode === \"all\") {\n      url = selectedClusterId\n        ? \"http://127.0.0.1:5000/getclusterurl/\" + selectedClusterId\n        : \"http://127.0.0.1:5000/getclusterurl/\";\n    } else if (mode === \"query\") {\n      url = selectedClusterId\n        ? \"http://127.0.0.1:5000/search/query/\" +\n          searchText +\n          \"/cluster/\" +\n          selectedClusterId\n        : \"http://127.0.0.1:5000/search/query/\" + searchText;\n    } else {\n      url = \"http://127.0.0.1:5000/search/domain/\" + searchText;\n    }\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        this.setState({ sitesList: data });\n      });\n  };\n  componentDidMount() {\n    this.fetchSites();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.mode !== this.props.mode ||\n      prevProps.selectedClusterId !== this.props.selectedClusterId\n    ) {\n      this.fetchSites();\n    }\n  }\n\n  render() {\n    console.log(this.props.selectedClusterId, this.state.sitesList);\n    let { sitesList } = this.state;\n    return (\n      <div className=\"flex flex-col m-8\">\n        <div className=\"-my-2 py-2 overflow-x-auto sm:-mx-6 sm:px-6 lg:-mx-8 lg:px-8\">\n          <div className=\"align-middle inline-block min-w-full shadow overflow-hidden sm:rounded-lg border-b border-gray-200\">\n            <table className=\"min-w-full\">\n              <thead>\n                <tr>\n                  <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider\">\n                    Url\n                  </th>\n                  <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider\">\n                    Rank\n                  </th>\n                  <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider\">\n                    Change\n                  </th>\n                  <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider\">\n                    Keywords\n                  </th>\n                  <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50\"></th>\n                </tr>\n              </thead>\n              {sitesList.map((obj, i) => (\n                <SiteRow key={obj.url} site_obj={obj} />\n              ))}\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SitesTable;\n","import React from \"react\";\n\nexport default function ({ word }) {\n  return (\n    <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2\">\n      {word}\n    </span>\n  );\n}\n","import React from \"react\";\nimport KeyWord from \"./KeyWord\";\n\nexport default function ({ keywords }) {\n  console.log(keywords);\n  return (\n    <div className=\" max-w-md rounded overflow-hidden shadow-lg mx-4 my-6 \">\n      <div className=\"px-6 py-4\">\n        <div className=\"font-bold text-xl mb-2 text-center\">Key Words</div>\n      </div>\n      <div className=\"px-6 py-4\">\n        {keywords.map((word, i) => (\n          <KeyWord key={i} word={word} />\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport KeyWordsCard from \"../../../websites/KeyWordsCard\";\nimport clusterData from \"./clusters.json\";\n//card ,card_cointainer,border\nclass ClusterInfo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clusterInfo: clusterData,\n      currentCluster: null,\n    };\n  }\n\n  fetchInfo = () => {\n    //get cluster id\n    //if cluster id is 0 do nothing\n    //else fetch\n  };\n  componentDidMount() {\n    //fetch and store clusterInfo\n    console.log(this.state);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.fetchInfo();\n    }\n  }\n  render() {\n    let { selectedClusterId } = this.props;\n    let { clusterInfo } = this.state;\n    console.log(selectedClusterId);\n    if (selectedClusterId) {\n      let clusterSizeChange =\n        clusterInfo[selectedClusterId].size[1] -\n        clusterInfo[selectedClusterId].size[0];\n      let clusterRank = Math.round(\n        clusterInfo[selectedClusterId].rank[0] /\n          clusterInfo[selectedClusterId].size[0]\n      );\n      let clusterRankChange =\n        Math.round(\n          clusterInfo[selectedClusterId].rank[1] /\n            clusterInfo[selectedClusterId].size[1]\n        ) - clusterRank;\n      return (\n        <>\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: \"1fr 1fr \",\n              justifyItems: \"center\",\n              marginBottom: \"40px\",\n            }}\n          >\n            <span\n              id=\"app\"\n              className=\"bg-white inline-block h-60 rounded shadow-md flex card text-grey-darkest mx-4 my-8\"\n              style={{ width: \"320px\" }}\n            >\n              <div className=\"w-full flex flex-col items-center\">\n                <div className=\"p-4 pb-0 flex-1\">\n                  <h3 className=\"font-medium mb-1 text-center text-grey-darkest\">\n                    {\" \"}\n                    Rank\n                  </h3>\n                  <div className=\"text-xs flex items-center mb-6\">\n                    <i className=\"fas fa-map-marker-alt mr-1 text-grey-dark\" />\n                  </div>\n                  <span className=\"text-5xl text-grey-darkest\">\n                    {clusterRank}\n                    <span className=\" bg-teal-300 text-sm ml-2 rounded-lg p-1\">\n                      {clusterRankChange >= 0 ? \"+\" : \"-\"}\n                      {clusterRankChange}\n                    </span>\n                  </span>\n                  <div className=\"flex items-center justify-center mt-4\"></div>\n                </div>\n                <div className=\"bg-gray-400 p-3 flex w-full text-center items-center justify-between transition hover:bg-grey-light\">\n                  Learn More\n                </div>\n              </div>\n            </span>\n            <span\n              id=\"app\"\n              className=\"bg-white  h-60 rounded shadow-md flex card text-grey-darkest mx-4 my-8\"\n              style={{ width: \"320px\" }}\n            >\n              <div className=\"w-full flex flex-col items-center\">\n                <div className=\"p-4 pb-0 flex-1\">\n                  <h3 className=\"font-medium mb-1 text-center text-grey-darkest\">\n                    {\" \"}\n                    Size\n                  </h3>\n                  <div className=\"text-xs flex items-center mb-6\">\n                    <i className=\"fas fa-map-marker-alt mr-1 text-grey-dark\" />\n                  </div>\n                  <span className=\"text-5xl text-grey-darkest\">\n                    {clusterInfo[selectedClusterId].size[0]}\n                    <span className=\" bg-teal-300 text-sm ml-2 rounded-lg p-1\">\n                      {clusterSizeChange >= 0 ? \"+\" : \"-\"} {clusterSizeChange}\n                    </span>\n                  </span>\n                  <div className=\"flex items-center justify-center mt-4\"></div>\n                </div>\n                <div className=\"bg-gray-400 p-3 flex w-full text-center items-center justify-between transition hover:bg-grey-light\">\n                  Learn More\n                </div>\n              </div>\n            </span>\n          </div>\n          <div\n            style={{\n              display: \"grid\",\n              justifyItems: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <KeyWordsCard\n              keywords={clusterInfo[selectedClusterId].keyword[0]\n                .split(/(\\s+)/)\n                .filter(function (e) {\n                  return e.trim().length > 0;\n                })}\n            />\n          </div>\n        </>\n      );\n    } else {\n      return <></>;\n    }\n  }\n}\n\nexport default ClusterInfo;\n","import React from \"react\";\nimport SearchCluster from \"./SearchCluster\";\nimport ClusterList from \"./ClusterList\";\nimport SitesTable from \"./sitestable/SitesTable\";\nimport ClusterInfo from \"./clusterinfo/index\";\n\nclass ClusterSelection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedClusterId: null,\n      //all,search,domain\n      mode: \"all\",\n      searchMode: \"query\",\n      searchText: \"\",\n      clusterIds: [],\n    };\n  }\n\n  componentDidMount() {\n    //dummy cluster list\n    let arr = [];\n    for (let i = 0; i <= 99; i++) {\n      arr.push(i);\n    }\n\n    this.setState({ clusterIds: arr });\n  }\n\n  handleChangeInput = (event) => {\n    let { mode } = this.state;\n    if (event.target.value === \"\") mode = \"all\";\n    this.setState({ searchText: event.target.value, mode });\n  };\n\n  handleSubmit = () => {\n    let { searchMode } = this.state;\n    this.setState({ mode: searchMode });\n  };\n\n  handleSearchMode = (searchMode) => {\n    this.setState({ searchMode });\n  };\n\n  selectClusterId = (id) => {\n    this.setState({ selectedClusterId: id, mode: \"all\" });\n  };\n\n  render() {\n    let {\n      clusterIds,\n      selectedClusterId,\n      mode,\n      searchText,\n      searchMode,\n    } = this.state;\n    console.log(mode, searchMode);\n    return (\n      <>\n        <ClusterList\n          clusterIds={clusterIds}\n          selectClusterId={this.selectClusterId}\n          selectedClusterId={selectedClusterId}\n        />\n        <ClusterInfo selectedClusterId={selectedClusterId} />\n        <SearchCluster\n          handleChange={this.handleChangeInput}\n          handleSubmit={this.handleSubmit}\n          handleSearchMode={this.handleSearchMode}\n          searchMode={searchMode}\n        />\n        <SitesTable\n          selectedClusterId={selectedClusterId}\n          mode={mode}\n          searchText={searchText}\n        />\n      </>\n    );\n  }\n}\n\nexport default ClusterSelection;\n","import React from \"react\";\nimport ClusterSelection from \"./clusterSelection/ClusterSelection\";\n\nclass Dash extends React.Component {\n  render() {\n    return (\n      <div>\n        <ClusterSelection />\n      </div>\n    );\n  }\n}\n\nexport default Dash;\n","import React from \"react\";\n\nexport default function ({ handleChange, handleClick }) {\n  return (\n    <span className=\"flex w-full  items-center border-b border-b-2 border-gray-500 py-1 \">\n      <input\n        onChange={handleChange}\n        className=\"appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\"\n        type=\"text\"\n        placeholder=\"https://www.google.com/\"\n        aria-label=\"url\"\n      />\n      <button\n        onClick={handleClick}\n        className=\"flex-shrink-0 bg-gray-800 hover:bg-gray-900 border-gray-800 hover:border-gray-900 text-sm border-4 text-white py-1 px-2 rounded\"\n        type=\"button\"\n      >\n        Search\n      </button>\n    </span>\n  );\n}\n","import React from \"react\";\n\nexport default function ({ websites }) {\n  return (\n    <div className=\"inline-block min-w-full max-w-md rounded overflow-hidden shadow-lg \">\n      <div className=\"px-6 py-4\">\n        <div className=\"font-bold text-xl mb-2 text-center\">Similar Sites</div>\n      </div>\n      <div className=\"text-center px-6 py-4\">\n        {websites.map((website, i) => (\n          <h3 key={i} className=\"underline text-blue-600 leading-tight\">\n            <a href={website}>{website}</a>\n          </h3>\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport KeyWordsCard from \"./KeyWordsCard\";\nimport InputUrl from \"./InputUrl\";\nimport SimSitesCard from \"./SimSitesCard\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keywords: [],\n      websites: [],\n      searched: false,\n      searching: false,\n      url: \"\",\n    };\n  }\n\n  fetchUrlDetails = () => {\n    let { url } = this.state;\n    console.log(url);\n    if (url === \"\") return;\n    this.setState({ searching: true, searched: true });\n    //store keywords,websites\n    fetch(\"http://websitecat-275808.appspot.com/\" + url)\n      .then((response) => response.json())\n      .then((data) =>\n        this.setState({\n          keywords: data.keywords || [],\n          websites: data.websites || [],\n          searching: false,\n        })\n      );\n    //change state and\n  };\n\n  handleClick = () => {\n    this.fetchUrlDetails();\n  };\n\n  handleChange = (event) => {\n    this.setState({ url: event.target.value });\n  };\n\n  render() {\n    let { searched, searching, keywords, websites, url } = this.state;\n    let prompt = \"\";\n    if (searching === true) prompt = \"Looking for result\";\n    else if (searched === false) prompt = \"Type a url to get info\";\n    else if (keywords.length === 0 && websites.length === 0)\n      prompt = \"something went wrong try another url\";\n    else prompt = url;\n\n    return (\n      <div>\n        <InputUrl\n          handleClick={this.handleClick}\n          handleChange={this.handleChange}\n        />\n        <DisplayWebsiteInfo prompt={prompt} />\n        <div>\n          {keywords.length !== 0 && <KeyWordsCard keywords={keywords} />}\n          {websites.length !== 0 && <SimSitesCard websites={websites} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction DisplayWebsiteInfo({ prompt }) {\n  return (\n    <div className=\" text-center max-w-md mx-auto flex p-6 bg-gray-100 mt-10 rounded-lg mb-8 shadow-xl\">\n      <div className=\"flex justify-center text-center ml-6 pt-1\">\n        <h1 className=\"text-center text-2xl text-blue-700 leading-tight\">\n          {prompt}\n        </h1>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar\";\nimport Dash from \"./components/dash/index\";\nimport Predict from \"./components/websites/index\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keywords: [],\n      websites: [],\n      searched: false,\n      searching: false,\n      url: \"\",\n    };\n  }\n\n  fetchUrlDetails = () => {\n    let { url } = this.state;\n    if (url === \"\") return;\n    this.setState({ searching: true, searched: true });\n    //store keywords,websites\n    fetch(\"http://127.0.0.1:5000/\" + url)\n      .then((response) => response.json())\n      .then((data) =>\n        this.setState({\n          keywords: data.keywords || [],\n          websites: data.websites || [],\n          searching: false,\n        })\n      );\n    //change state and\n  };\n\n  handleClick = () => {\n    this.fetchUrlDetails();\n  };\n\n  handleChange = (event) => {\n    this.setState({ url: event.target.value });\n  };\n\n  render() {\n    return (\n      <div>\n        <Router>\n          <NavBar />\n          <Switch>\n            <Route path=\"/dash\">\n              <Dash />\n            </Route>\n            <Route path=\"/websites\">\n              <Predict />\n            </Route>\n            <Route path=\"/\">\n              <Dash />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./tailwind.generated.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}