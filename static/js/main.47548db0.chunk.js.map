{"version":3,"sources":["components/DisplayWebsiteInfo.js","components/InputUrl.js","components/KeyWord.js","components/KeyWordsCard.js","components/SimSitesCard.js","App.js","serviceWorker.js","index.js"],"names":["prompt","className","handleChange","handleClick","onChange","type","placeholder","aria-label","onClick","word","keywords","map","i","KeyWord","key","websites","website","href","App","props","fetchUrlDetails","url","state","setState","searching","searched","fetch","then","response","json","data","event","target","value","this","console","log","length","InputUrl","DisplayWebsiteInfo","KeyWordsCard","SimSitesCard","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iRAEe,G,MAAA,YAAuB,IAAXA,EAAU,EAAVA,OACzB,OACE,yBAAKC,UAAU,sFACb,yBAAKA,UAAU,6CACb,wBAAIA,UAAU,oDACXD,OCLI,cAA0C,IAA9BE,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,YACvC,OACE,6BACE,yBAAKF,UAAU,8DACb,2BACEG,SAAUF,EACVD,UAAU,kHACVI,KAAK,OACLC,YAAY,0BACZC,aAAW,QAEb,4BACEC,QAASL,EACTF,UAAU,kIACVI,KAAK,UAHP,aCXO,cAAqB,IAATI,EAAQ,EAARA,KACzB,OACE,0BAAMR,UAAU,iGACbQ,ICFQ,cAAyB,IAAbC,EAAY,EAAZA,SACzB,OACE,yBAAKT,UAAU,0DACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,sCAAf,cAEF,yBAAKA,UAAU,aACZS,EAASC,KAAI,SAACF,EAAMG,GAAP,OACZ,kBAACC,EAAD,CAASC,IAAKF,EAAGH,KAAMA,UCTlB,cAAyB,IAAbM,EAAY,EAAZA,SACzB,OACE,yBAAKd,UAAU,uEACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,sCAAf,kBAEF,yBAAKA,UAAU,yBACZc,EAASJ,KAAI,SAACK,EAASJ,GAAV,OACZ,wBAAIE,IAAKF,EAAGX,UAAU,yCACpB,uBAAGgB,KAAMD,GAAUA,UCuDhBE,E,kDAzDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,gBAAkB,WAAO,IACjBC,EAAQ,EAAKC,MAAbD,IACM,KAARA,IACJ,EAAKE,SAAS,CAAEC,WAAW,EAAMC,UAAU,IAE3CC,MAAM,yBAA2BL,GAC9BM,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJ,EAAKP,SAAS,CACZb,SAAUoB,EAAKpB,UAAY,GAC3BK,SAAUe,EAAKf,UAAY,GAC3BS,WAAW,SArBA,EA0BnBrB,YAAc,WACZ,EAAKiB,mBA3BY,EA6BnBlB,aAAe,SAAC6B,GACd,EAAKR,SAAS,CAAEF,IAAKU,EAAMC,OAAOC,SA5BlC,EAAKX,MAAQ,CACXZ,SAAU,GACVK,SAAU,GACVU,UAAU,EACVD,WAAW,EACXH,IAAK,IAPU,E,qDAgCT,IAAD,EACgDa,KAAKZ,MAAtDG,EADC,EACDA,SAAUD,EADT,EACSA,UAAWd,EADpB,EACoBA,SAAUK,EAD9B,EAC8BA,SAAUM,EADxC,EACwCA,IAC/Cc,QAAQC,IAAIZ,EAAWd,GACvB,IAAIV,EAAS,GAMb,OALwBA,GAAN,IAAdwB,EAA6B,sBACX,IAAbC,EAA6B,yBACT,IAApBf,EAAS2B,QAAoC,IAApBtB,EAASsB,OAChC,uCACGhB,EAEZ,oCACE,kBAACiB,EAAD,CACEnC,YAAa+B,KAAK/B,YAClBD,aAAcgC,KAAKhC,eAErB,kBAACqC,EAAD,CAAoBvC,OAAQA,IAC5B,6BACuB,IAApBU,EAAS2B,QAAgB,kBAACG,EAAD,CAAc9B,SAAUA,IAC7B,IAApBK,EAASsB,QAAgB,kBAACI,EAAD,CAAc1B,SAAUA,U,GAnD1C2B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.47548db0.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function ({ prompt }) {\n  return (\n    <div className=\" text-center max-w-md mx-auto flex p-6 bg-gray-100 mt-10 rounded-lg mb-8 shadow-xl\">\n      <div className=\"flex justify-center text-center ml-6 pt-1\">\n        <h1 className=\"text-center text-2xl text-blue-700 leading-tight\">\n          {prompt}\n        </h1>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function ({ handleChange, handleClick }) {\n  return (\n    <div>\n      <div className=\"flex items-center border-b border-b-2 border-teal-500 py-2\">\n        <input\n          onChange={handleChange}\n          className=\"appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\"\n          type=\"text\"\n          placeholder=\"https://www.google.com/\"\n          aria-label=\"url\"\n        />\n        <button\n          onClick={handleClick}\n          className=\"flex-shrink-0 bg-teal-500 hover:bg-teal-700 border-teal-500 hover:border-teal-700 text-sm border-4 text-white py-1 px-2 rounded\"\n          type=\"button\"\n        >\n          Search\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function ({ word }) {\n  return (\n    <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2\">\n      {word}\n    </span>\n  );\n}\n","import React from \"react\";\nimport KeyWord from \"./KeyWord\";\n\nexport default function ({ keywords }) {\n  return (\n    <div className=\"min-w-full max-w-md rounded overflow-hidden shadow-lg \">\n      <div className=\"px-6 py-4\">\n        <div className=\"font-bold text-xl mb-2 text-center\">Key Words</div>\n      </div>\n      <div className=\"px-6 py-4\">\n        {keywords.map((word, i) => (\n          <KeyWord key={i} word={word} />\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function ({ websites }) {\n  return (\n    <div className=\"inline-block min-w-full max-w-md rounded overflow-hidden shadow-lg \">\n      <div className=\"px-6 py-4\">\n        <div className=\"font-bold text-xl mb-2 text-center\">Similar Sites</div>\n      </div>\n      <div className=\"text-center px-6 py-4\">\n        {websites.map((website, i) => (\n          <h3 key={i} className=\"underline text-blue-600 leading-tight\">\n            <a href={website}>{website}</a>\n          </h3>\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport DisplayWebsiteInfo from \"./components/DisplayWebsiteInfo\";\nimport InputUrl from \"./components/InputUrl\";\nimport KeyWordsCard from \"./components/KeyWordsCard\";\nimport SimSitesCard from \"./components/SimSitesCard\";\nimport Topbar from \"./components/Topbar\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keywords: [],\n      websites: [],\n      searched: false,\n      searching: false,\n      url: \"\",\n    };\n  }\n  fetchUrlDetails = () => {\n    let { url } = this.state;\n    if (url === \"\") return;\n    this.setState({ searching: true, searched: true });\n    //store keywords,websites\n    fetch(\"http://127.0.0.1:5000/\" + url)\n      .then((response) => response.json())\n      .then((data) =>\n        this.setState({\n          keywords: data.keywords || [],\n          websites: data.websites || [],\n          searching: false,\n        })\n      );\n    //change state and\n  };\n  handleClick = () => {\n    this.fetchUrlDetails();\n  };\n  handleChange = (event) => {\n    this.setState({ url: event.target.value });\n  };\n  render() {\n    let { searched, searching, keywords, websites, url } = this.state;\n    console.log(searching, keywords);\n    let prompt = \"\";\n    if (searching === true) prompt = \"Looking for result\";\n    else if (searched === false) prompt = \"Type a url to get info\";\n    else if (keywords.length === 0 && websites.length === 0)\n      prompt = \"something went wrong try another url\";\n    else prompt = url;\n    return (\n      <>\n        <InputUrl\n          handleClick={this.handleClick}\n          handleChange={this.handleChange}\n        />\n        <DisplayWebsiteInfo prompt={prompt} />\n        <div>\n          {keywords.length !== 0 && <KeyWordsCard keywords={keywords} />}\n          {websites.length !== 0 && <SimSitesCard websites={websites} />}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./tailwind.generated.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}